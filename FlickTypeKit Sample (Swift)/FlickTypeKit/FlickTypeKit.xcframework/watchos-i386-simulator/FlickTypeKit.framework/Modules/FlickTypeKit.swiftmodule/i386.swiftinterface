// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
// swift-module-flags: -target i386-apple-watchos4.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=unchecked -O -module-name FlickTypeKit
import AVFoundation
import CoreGraphics.CGBase
import CommonCrypto
import CoreGraphics
@_exported import FlickTypeKit
import Foundation
import SpriteKit
import Swift
import UIKit
import WatchConnectivity
import WatchKit
import os.log
import os
extension Statistics {
  public static func normalDistribution(x: CoreGraphics.CGFloat, μ: CoreGraphics.CGFloat = 0, σ: CoreGraphics.CGFloat = 1) -> FlickTypeKit.ShapeScore
  public static func normalDensity(x: CoreGraphics.CGFloat, μ: CoreGraphics.CGFloat = 0, σ: CoreGraphics.CGFloat = 1) -> FlickTypeKit.ShapeScore
}
public class Statistics {
  public static func normalDistribution(x: Swift.Double, μ: Swift.Double = 0, σ: Swift.Double = 1) -> Swift.Double
  public static func normalDensity(x: Swift.Double, μ: Swift.Double = 0, σ: Swift.Double = 1) -> Swift.Double
  public static func normalQuantile(p: Swift.Double, μ: Swift.Double = 0, σ: Swift.Double = 1) -> Swift.Double?
  @objc deinit
}
public enum Device {
  case appleWatchSeries0_38mm
  case appleWatchSeries0_42mm
  case appleWatchSeries1_38mm
  case appleWatchSeries1_42mm
  case appleWatchSeries2_38mm
  case appleWatchSeries2_42mm
  case appleWatchSeries3_38mm
  case appleWatchSeries3_42mm
  case appleWatchSeries4_40mm
  case appleWatchSeries4_44mm
  indirect case simulator(FlickTypeKit.Device)
  case unknown(Swift.String)
  public init()
  public static var identifier: Swift.String
  public static func mapToDevice(identifier: Swift.String) -> FlickTypeKit.Device
  public static func realDevice(from device: FlickTypeKit.Device) -> FlickTypeKit.Device
  public var diagonal: Swift.Double {
    get
  }
  public var screenRatio: (width: Swift.Double, height: Swift.Double) {
    get
  }
  public static var allWatches: [FlickTypeKit.Device] {
    get
  }
  public static var allSimulatorWatches: [FlickTypeKit.Device] {
    get
  }
  public static var allRealDevices: [FlickTypeKit.Device] {
    get
  }
  public static var allSimulators: [FlickTypeKit.Device] {
    get
  }
  public func isOneOf(_ devices: [FlickTypeKit.Device]) -> Swift.Bool
  public var name: Swift.String {
    get
  }
  public var systemName: Swift.String {
    get
  }
  public var systemVersion: Swift.String {
    get
  }
  public var model: Swift.String {
    get
  }
  public var localizedModel: Swift.String {
    get
  }
  public var ppi: Swift.Int? {
    get
  }
  public var isGuidedAccessSessionActive: Swift.Bool {
    get
  }
  public var screenBrightness: Swift.Int {
    get
  }
}
extension Device : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Device : Swift.Equatable {
  public static func == (lhs: FlickTypeKit.Device, rhs: FlickTypeKit.Device) -> Swift.Bool
}
@available(iOS 8.0, watchOS 4.0, *)
extension Device {
  public enum BatteryState : Swift.CustomStringConvertible, Swift.Equatable {
    case full
    case charging(Swift.Int)
    case unplugged(Swift.Int)
    public var lowPowerMode: Swift.Bool {
      get
    }
    public var description: Swift.String {
      get
    }
  }
  public var batteryState: FlickTypeKit.Device.BatteryState {
    get
  }
  public var batteryLevel: Swift.Int {
    get
  }
}
@available(iOS 8.0, watchOS 4.0, *)
extension Device.BatteryState : Swift.Comparable {
  public static func == (lhs: FlickTypeKit.Device.BatteryState, rhs: FlickTypeKit.Device.BatteryState) -> Swift.Bool
  public static func < (lhs: FlickTypeKit.Device.BatteryState, rhs: FlickTypeKit.Device.BatteryState) -> Swift.Bool
}
extension UIAccessibility {
  public static func post(notification: UIKit.UIAccessibility.Notification, argument: Any?)
  public static var isVoiceOverRunning: Swift.Bool {
    get
  }
}
public var isVoiceOverEnabled: Swift.Bool {
  get
}
public func VoiceOverifyText(_ text: Swift.String) -> Swift.String
extension UIAccessibility {
  public static func post(notification: UIKit.UIAccessibility.Notification, argument: Any?, afterDelay: Foundation.TimeInterval)
}
@objc extension FileManager {
  @objc dynamic public var sharedContainerURL: Foundation.URL {
    @objc get
  }
}
@objc extension UserDefaults {
  @objc public static let shared: Foundation.UserDefaults
  @objc dynamic public var flickTypeDictionary: [Swift.String : Any] {
    @objc get
  }
  @objc dynamic public var emojiShortcuts: [Swift.String] {
    @objc get
  }
  @objc dynamic public var userWords: Swift.Set<Swift.String> {
    @objc get
  }
  @objc dynamic public func addUserWord(_ word: Swift.String)
  @objc dynamic public func removeUserWord(_ word: Swift.String)
  @objc dynamic public var themeColor: UIKit.UIColor {
    @objc get
  }
  @objc dynamic public var voiceFeedback: Swift.Bool {
    @objc get
  }
  @objc dynamic public var liveSuggestions: Swift.Bool {
    @objc get
  }
  @objc dynamic public var launches: Swift.Int {
    @objc get
    @objc set
  }
  @objc dynamic public var currentSettingsSummary: [Swift.String : Any] {
    @objc get
  }
}
@objc extension Bundle {
  @objc public static let isExtension: Swift.Bool
  @objc public static let isAppStoreInstall: Swift.Bool
  @objc dynamic public var versionAndBuild: Swift.String {
    @objc get
  }
  @objc dynamic public var bundleID: Swift.String {
    @objc get
  }
}
extension String {
  public var replacingNewLinesAndReplacementChars: Swift.String {
    get
  }
  public var trimmingWhitespace: Swift.String {
    get
  }
  public var isOnlyWhitespace: Swift.Bool {
    get
  }
  public var needsSpaceBefore: Swift.Bool {
    get
  }
  public var tokens: [Swift.String] {
    get
  }
  public var capitalizedFirstLetter: Swift.String {
    get
  }
}
extension UIColor {
  public static let darkRed: UIKit.UIColor
  public static let darkGreen: UIKit.UIColor
  public static let veryLightGray: UIKit.UIColor
  public static let systemGreen: UIKit.UIColor
  public static let systemYellow: UIKit.UIColor
  public static let lightRed: UIKit.UIColor
  public static let lightGreen: UIKit.UIColor
  public static let lightBlue: UIKit.UIColor
  public var redComponent: CoreGraphics.CGFloat {
    get
  }
  public var greenComponent: CoreGraphics.CGFloat {
    get
  }
  public var blueComponent: CoreGraphics.CGFloat {
    get
  }
  public var alphaComponent: CoreGraphics.CGFloat {
    get
  }
  public var withAppliedAlpha: UIKit.UIColor {
    get
  }
}
public protocol SoundEffectManager {
  static var shared: FlickTypeKit.SoundEffectManager { get }
  func playTap(withPan pan: Swift.Float)
  func playFocus()
  func playCursor()
  func vibrateSelection()
  func playBoundary()
  func playDirectionUp()
  func playDirectionDown()
}
extension RandomNumberGeneratorObjC : Swift.RandomNumberGenerator {
  public func next() -> Swift.UInt64
}
public class LowPassFilter1D {
  public var out: CoreGraphics.CGFloat?
  public var lastInput: CoreGraphics.CGFloat?
  public init(_ a: CoreGraphics.CGFloat = 1)
  public func reset()
  public func update(_ input: CoreGraphics.CGFloat, alpha: CoreGraphics.CGFloat? = nil) -> CoreGraphics.CGFloat
  public func update(_ input: Swift.Double) -> Swift.Double
  @objc deinit
}
@discardableResult
public func measureBlock<R>(_ label: Swift.String, show: Swift.Bool = true, times: Swift.Int = 1, file: Swift.String = #file, _ block: () -> R?) -> R?
extension String {
  public var canBeAddedToDictionary: Swift.Bool {
    get
  }
}
extension CGPoint {
  public static func + (left: CoreGraphics.CGPoint, right: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
  public static func - (left: CoreGraphics.CGPoint, right: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
  public static func * (left: CoreGraphics.CGPoint, right: CoreGraphics.CGSize) -> CoreGraphics.CGPoint
  public static func / (left: CoreGraphics.CGPoint, right: CoreGraphics.CGSize) -> CoreGraphics.CGPoint
  public static func * (left: CoreGraphics.CGPoint, right: CoreGraphics.CGFloat) -> CoreGraphics.CGPoint
  public static func / (left: CoreGraphics.CGPoint, right: CoreGraphics.CGFloat) -> CoreGraphics.CGPoint
  public static func nextUniformPoint(using randomGenerator: inout FlickTypeKit.RandomNumberGeneratorObjC) -> CoreGraphics.CGPoint
  public static func nextGaussianPoint(using randomGenerator: inout FlickTypeKit.RandomNumberGeneratorObjC) -> CoreGraphics.CGPoint
  public var magnitude: CoreGraphics.CGFloat {
    get
  }
}
public protocol EventTrackerImplementationProtocol {
  func log(_ message: Swift.String)
  func timeEvent(_ eventName: Swift.String)
  func trackEvent(_ eventName: Swift.String, properties: [Swift.String : Any])
  func incrementProfileProperty(_ property: Swift.String, by amount: Swift.Int)
}
public class EventTracker {
  public static var shared: FlickTypeKit.EventTracker!
  public init(implementation: FlickTypeKit.EventTrackerImplementationProtocol? = nil)
  public func log(_ message: Swift.String)
  public func timeEvent(_ eventName: Swift.String)
  public func trackEvent(_ eventName: Swift.String, properties: [Swift.String : Any] = [:], file: Swift.String = #file, line: Swift.Int = #line, function: Swift.String = #function)
  public func trackError(_ properties: [Swift.String : Any] = [:], file: Swift.String = #file, line: Swift.Int = #line, function: Swift.String = #function) -> Swift.Never
  public func trackWarning(_ properties: [Swift.String : Any] = [:], file: Swift.String = #file, line: Swift.Int = #line, function: Swift.String = #function)
  public func incrementProfileProperty(_ property: Swift.String, by amount: Swift.Int = 1)
  @objc deinit
}
extension NSObject {
  @objc public static func log(_ text: Swift.String = "", function: Swift.String = #function, object: Swift.AnyObject? = nil)
  @objc dynamic open func log(_ text: Swift.String = "", function: Swift.String = #function)
}
public class EventTrackerDebugImplementation : FlickTypeKit.EventTrackerImplementationProtocol {
  public init()
  public func log(_ message: Swift.String)
  public func timeEvent(_ eventName: Swift.String)
  public func trackEvent(_ eventName: Swift.String, properties: [Swift.String : Any] = [:])
  public func incrementProfileProperty(_ property: Swift.String, by amount: Swift.Int)
  @objc deinit
}
extension WKInterfaceController {
  @objc dynamic public func presentTextInputController(withSuggestions suggestions: [Swift.String]?, allowedInputMode inputMode: WatchKit.WKTextInputMode, flickTypeMode: FlickTypeKit.FlickType.Mode, flickTypeProperties: [Swift.String : Any] = [:], startingText: Swift.String = "", completion: @escaping ([Any]?) -> Swift.Void)
  @objc dynamic public func presentTextInputControllerWithSuggestions(forLanguage suggestionsHandler: ((Swift.String) -> [Any]?)?, allowedInputMode inputMode: WatchKit.WKTextInputMode, flickTypeMode: FlickTypeKit.FlickType.Mode, flickTypeProperties: [Swift.String : Any] = [:], startingText: Swift.String = "", completion: @escaping ([Any]?) -> Swift.Void)
}
@objc public class FlickType : ObjectiveC.NSObject {
  @objc public enum Mode : Swift.Int {
    case ask
    case always
    case off
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum PresentationStyle : Swift.Int {
    case push
    case modal
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public static func resourceHash(_ input: Swift.String) -> Swift.String?
  public static func deleteLocalResourceFiles()
  public static var localResourceExists: Swift.Bool {
    get
  }
  public static func setLocalResourceFile(_ fileUrl: Foundation.URL) throws
  @objc public static func startDownloadingInBackground()
  public static func notifyAppDidBecomeActive()
  @objc deinit
}
extension FlickType.Mode : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension WKApplicationState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension WKGestureRecognizerState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension WCSessionActivationState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension CGSize {
  public static let greatestFiniteSize: CoreGraphics.CGSize
  public func contains(_ size: CoreGraphics.CGSize) -> Swift.Bool
  public var floored: CoreGraphics.CGSize {
    get
  }
}
extension FlickTypeKit.FlickType.Mode : Swift.Hashable {}
extension FlickTypeKit.FlickType.Mode : Swift.RawRepresentable {}
extension FlickTypeKit.FlickType.PresentationStyle : Swift.Hashable {}
extension FlickTypeKit.FlickType.PresentationStyle : Swift.RawRepresentable {}
